import os
import pandas as pd
import re
from mutagen.flac import FLAC, Picture
from mutagen.id3 import ID3, TIT2, TPE1, TALB, TCON, COMM, APIC, ID3NoHeaderError
from mutagen.mp3 import MP3
from mutagen import File as MutagenFile

# === CONFIG ===
CSV_PATH = "/Users/studio/TrackstarEngine/catalog/track_catalog.csv"
AUDIO_FOLDER = "/Users/studio/TrackstarEngine/audio"
COVERS_FOLDER = "/Users/studio/TrackstarEngine/covers"
OUTPUT_CSV = "/Users/studio/TrackstarEngine/catalog/track_catalog_synced.csv"

# === HELPERS ===
def normalize(name):
    return re.sub(r'[^a-z0-9]', '', name.lower())

def embed_flac_metadata(path, metadata, cover_path=None):
    try:
        audio = FLAC(path)
        audio['title'] = metadata['title']
        audio['artist'] = metadata['artist']
        audio['album'] = metadata['album']
        audio['genre'] = metadata['genre']
        audio['comment'] = metadata['comment']
        if cover_path and os.path.exists(cover_path):
            image = Picture()
            with open(cover_path, "rb") as f:
                image.data = f.read()
            image.type = 3
            image.mime = "image/jpeg" if cover_path.lower().endswith(".jpg") else "image/png"
            audio.clear_pictures()
            audio.add_picture(image)
        audio.save()
        print(f"✅ Embedded: {os.path.basename(path)}")
    except Exception as e:
        print(f"❌ FLAC error: {os.path.basename(path)} — {e}")

def embed_mp3_metadata(path, metadata, cover_path=None):
    try:
        audio = MP3(path)
        try:
            audio.add_tags()
        except ID3NoHeaderError:
            pass
        tags = ID3(path)
        tags["TIT2"] = TIT2(encoding=3, text=metadata["title"])
        tags["TPE1"] = TPE1(encoding=3, text=metadata["artist"])
        tags["TALB"] = TALB(encoding=3, text=metadata["album"])
        tags["TCON"] = TCON(encoding=3, text=metadata["genre"])
        tags["COMM"] = COMM(encoding=3, lang="eng", desc="desc", text=metadata["comment"])
        if cover_path and os.path.exists(cover_path):
            with open(cover_path, "rb") as f:
                image_data = f.read()
            tags["APIC"] = APIC(
                encoding=3, mime="image/jpeg", type=3, desc=u"Cover", data=image_data
            )
        tags.save(path)
        print(f"✅ Embedded: {os.path.basename(path)}")
    except Exception as e:
        print(f"❌ MP3 error: {os.path.basename(path)} — {e}")

# === LOAD + MATCH ===
df = pd.read_csv(CSV_PATH)
audio_files = [f for f in os.listdir(AUDIO_FOLDER) if f.lower().endswith((".flac", ".mp3"))]
cover_files = [f for f in os.listdir(COVERS_FOLDER) if f.lower().endswith((".jpg", ".jpeg", ".png"))]

audio_map = {normalize(os.path.splitext(f)[0]): f for f in audio_files}
cover_map = {normalize(os.path.splitext(f)[0]): f for f in cover_files}

updated_audio, updated_cover = [], []

for index, row in df.iterrows():
    raw_title = row.get("Clean Title") or row.get("Title") or ""
    norm_title = normalize(raw_title)

    audio_file = audio_map.get(norm_title)
    cover_file = cover_map.get(norm_title)

    updated_audio.append(audio_file)
    updated_cover.append(cover_file)

    if not audio_file:
        print(f"⚠️ Missing audio for: {raw_title}")
        continue

    full_audio_path = os.path.join(AUDIO_FOLDER, audio_file)
    full_cover_path = os.path.join(COVERS_FOLDER, cover_file) if cover_file else None

    metadata = {
        "title": row.get("Title", raw_title).strip(),
        "artist": row.get("Artist", "StudioRich").strip(),
        "album": row.get("Album", "Stranger Vibes").strip(),
        "genre": row.get("Genre", "Lofi").strip(),
        "comment": row.get("Comment", "Generated by Trackstar").strip(),
    }

    if audio_file.lower().endswith(".flac"):
        embed_flac_metadata(full_audio_path, metadata, full_cover_path)
    elif audio_file.lower().endswith(".mp3"):
        embed_mp3_metadata(full_audio_path, metadata, full_cover_path)

# === Save updated catalog with filenames
df["Audio Filename"] = updated_audio
df["Cover Art Filename"] = updated_cover
df.to_csv(OUTPUT_CSV, index=False)
print(f"\n✅ Catalog synced and saved to: {OUTPUT_CSV}")
